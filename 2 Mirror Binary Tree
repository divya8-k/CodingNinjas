

class BinaryTreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


def printBinaryTree(root):
    if root == None:
        return
    print(root.data)
    printBinaryTree(root.left)
    printBinaryTree(root.right)
    
    
def mirrorBinaryTree(root) :
    # Your code goes here
    if root == None:
        return None
    
    if root.left == None and root.right == None:
        return None
    
    mirrorBinaryTree(root.left)
    mirrorBinaryTree(root.right)
        
    temp = root.left
    root.left = root.right
    root.right = temp        

    return root
    

def build_tree(arr):
    if len(arr) == 0:
        return None

    nodes = []

    val = arr.pop(0)
    root = BinaryTreeNode(val)
    nodes.append(root)

    while len(arr) > 0:
        curr = nodes.pop(0)

        left_val = arr.pop(0)
        if left_val is not None:
            curr.left = BinaryTreeNode(left_val)
            nodes.append(curr.left)

        if len(arr) > 0:
            right_val = arr.pop(0)
            if right_val is not None:
                curr.right = BinaryTreeNode(right_val)
                nodes.append(curr.right)

    return root



root = build_tree([1,2,3])    
printBinaryTree(root)
mirrorBinaryTree(root)
print()
print("After")
printBinaryTree(root)
